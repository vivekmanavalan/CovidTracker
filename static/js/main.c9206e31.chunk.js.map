{"version":3,"sources":["Components/Card/Cards.module.css","Components/CountryPicker/Country.module.css","Components/Api/index.js","Components/Card/Card.js","Components/Chart/Chart.js","Components/CountryPicker/Country.js","App.js","serviceWorker.js","index.js","Components/Chart/Chart.module.css","App.css"],"names":["module","exports","url","fetchCardData","country","a","changeableUrl","axios","get","data","fetchChartData","map","confirmed","deaths","date","reportDate","total","fetchCountries","countries","name","card","props","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","Date","lastUpdate","toDateString","recovered","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","Country","handleCountryChange","setcountry","fetchData","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","setState","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9206e31.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"_2BVgKHsMElWMiQ9KPIDySR\",\"card\":\"I8RDX7vDRFXQGS_OXEEk-\",\"infected\":\"_3Xo_FGGYjDhx7Ni4Coix_g\",\"recovered\":\"_3ciSF6lF2h-Yxae-BUzXSj\",\"deaths\":\"_2e5fGQfMrhM1uU9AYGrZJX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"_16iuMvU9s3-cwA-29mlRbT\"};","import axios from 'axios';\r\n\r\n\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchCardData = async (country) =>{\r\n    let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n    try {\r\n        const data = await axios.get(changeableUrl);\r\n        return data;\r\n        \r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchChartData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        return data.map(({confirmed, deaths, reportDate: date}) =>({confirmed: confirmed.total, deaths: deaths.total, date}));\r\n        \r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/countries`);\r\n        return data.countries.map((country)=> country.name); \r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}","import React from 'react';\r\nimport {Card, Grid, CardContent, Typography} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\nimport CountUp from 'react-countup';\r\n\r\nconst card =(props) =>{\r\n    if(props.data.confirmed){ \r\n    return(\r\n        <div className={styles.container}>    \r\n        <Grid container spacing={3} justify=\"center\">\r\n         <Grid item xs={12} md={3} component={Card} className={cx(styles.infected)}>\r\n            <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                <CountUp start={0} end={props.data.confirmed.value} duration={2} />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(props.data.lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Number of active cases</Typography>\r\n            </CardContent>\r\n         </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                <CountUp start={0} end={props.data.recovered.value} duration={2} />\r\n            </Typography>\r\n            <Typography>{new Date(props.data.lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Number of recovered cases</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                <CountUp start={0} end={props.data.deaths.value} duration={2} />\r\n            </Typography>\r\n            <Typography>{new Date(props.data.lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Number of deaths cases</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n\r\n    </Grid>\r\n    </div>\r\n    );\r\n    }\r\n    else{\r\n     return(\r\n         <h3>loading..</h3>\r\n     )\r\n    }\r\n}\r\nexport default card;","import React, {useState, useEffect} from 'react';\r\nimport {fetchChartData} from '../Api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n \r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n  \r\n    useEffect(() => {\r\n      const fetchMyAPI = async () => {\r\n        const initialDailyData = await fetchChartData();\r\n  \r\n        setDailyData(initialDailyData);\r\n      };\r\n  \r\n      fetchMyAPI();\r\n    }, []);\r\n  \r\n    const barChart = (\r\n      confirmed ? (\r\n        <Bar\r\n          data={{\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n            datasets: [\r\n              {\r\n                label: 'People',\r\n                backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                data: [confirmed.value, recovered.value, deaths.value],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            legend: { display: false },\r\n            title: { display: true, text: `Current state in ${country}` },\r\n          }}\r\n        />\r\n      ) : null\r\n    );\r\n  \r\n    const lineChart = (\r\n      dailyData[0] ? (\r\n        <Line\r\n          data={{\r\n            labels: dailyData.map(({ date }) => date),\r\n            datasets: [{\r\n              data: dailyData.map((data) => data.confirmed),\r\n              label: 'Infected',\r\n              borderColor: '#3333ff',\r\n              fill: true,\r\n            }, {\r\n              data: dailyData.map((data) => data.deaths),\r\n              label: 'Deaths',\r\n              borderColor: 'red',\r\n              backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n              fill: true,\r\n            },\r\n            ],\r\n          }}\r\n        />\r\n      ) : null\r\n    );\r\n  \r\n    return (\r\n      \r\n      <div className={styles.container}>\r\n        {country ? barChart : lineChart}\r\n      </div>\r\n    );\r\n  };\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {FormControl, NativeSelect} from '@material-ui/core';\r\nimport {fetchCountries}  from '../Api';\r\nimport './Country.module.css';\r\n\r\nconst Country = ({handleCountryChange}) => {\r\n\r\nconst [country, setcountry] = useState([]);\r\nuseEffect (() => {\r\n    const fetchData = async() =>{\r\n         const country = await fetchCountries();\r\n         setcountry (country);\r\n    }\r\n\r\n    fetchData();\r\n},[]);\r\n\r\n    return(\r\n      <FormControl className=\"formControl\">\r\n        <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\r\n            <option value=\"\">Global</option>\r\n            {country.map((country, i)=>\r\n                <option key={i} value={country}>{country}</option>\r\n            )}\r\n\r\n        </NativeSelect>\r\n\r\n      </FormControl>\r\n\r\n);\r\n}\r\nexport default Country;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {fetchCardData} from'./Components/Api';\r\nimport Card from './Components/Card/Card';\r\nimport Chart from './Components/Chart/Chart';\r\nimport Country from './Components/CountryPicker/Country';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      data:{},\r\n      country:' ',\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n      const data  = await fetchCardData();\r\n      this.setState({\r\n        data: data.data,\r\n      })\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const { data } = await fetchCardData(country);\r\n\r\n    this.setState({ data, country: country });\r\n  }\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"App\">\r\n    <Card data={this.state.data}/> \r\n    <Country handleCountryChange= {this.handleCountryChange}/>\r\n    <Chart data={this.state.data} country={this.state.country}/>\r\n    </div>\r\n  );\r\n  }\r\n  }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"oAt1CEQGyHUa1hddGkDi2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"_1o-FpbQrR11SDFN-G7O4U3\"};"],"sourceRoot":""}