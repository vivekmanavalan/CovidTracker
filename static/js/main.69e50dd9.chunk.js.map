{"version":3,"sources":["Components/Api/index.js","Components/Card/Card.js","Components/Chart/Chart.js","Components/CountryPicker/Country.js","Components/CountryPicker/States.js","Components/Card/StateCard.js","Components/Chart/StateChart.js","App.js","serviceWorker.js","index.js","Components/Chart/Chart.module.css","Components/CountryPicker/Country.module.css","Components/Card/Cards.module.css","Components/Images/image.png","App.css"],"names":["url","fetchCardData","country","index","a","changeableUrl","console","log","axios","get","data","modifiedData","confirmed","statewise","active","recovered","deaths","fetchChartData","map","date","reportDate","total","fetchCountries","countries","name","fetchIndianStates","regional","state","loc","fetchStatesData","calculateActive","confirmedCasesIndian","confirmedCasesForeign","discharged","card","props","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","Date","lastUpdate","toDateString","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","length","Country","handleCountryChange","handleStateChange","setcountry","fetchData","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","FetchStates","states","setstates","statecard","StateChart","App","setState","isIndia","isState","stateName","this","src","image","alt","StateCard","States","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.69e50dd9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchCardData = async (country,index) =>{\r\n    let changeableUrl = url;\r\n    if(country==\"India\"){\r\n        console.log(\"inside india if index.js\")\r\n        changeableUrl = \"https://api.covid19india.org/data.json\";\r\n        try {\r\n        const { data } = await axios.get(changeableUrl);\r\n        const modifiedData = {\r\n            confirmed: data.statewise[0].active,\r\n            recovered: data.statewise[0].recovered,\r\n            deaths: data.statewise[0].deaths\r\n        }\r\n        return modifiedData;\r\n        }\r\n        catch (error) {\r\n        return error;   \r\n        }\r\n}\r\nelse{\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n    try {\r\n        const data = await axios.get(changeableUrl);\r\n        return data;\r\n        \r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n}\r\n\r\nexport const fetchChartData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        return data.map(({confirmed, deaths, reportDate: date}) =>({confirmed: confirmed.total, deaths: deaths.total, date}));\r\n        \r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/countries`);\r\n        return data.countries.map((country)=> country.name); \r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchIndianStates = async () => {\r\ntry {\r\n    const { data } = await axios.get(\"https://api.rootnet.in/covid19-in/stats/latest\");\r\n    return data.data.regional.map((state) => state.loc);\r\n} catch (error) {\r\n    return error;\r\n}\r\n}\r\n\r\nexport const fetchStatesData = async (state) => {\r\n try {\r\n     const { data } = await axios.get(\"https://api.rootnet.in/covid19-in/stats/latest\");\r\n     console.log(\"statesData\",data);\r\n     let calculateActive = data.data.regional[state].confirmedCasesIndian + data.data.regional[state].confirmedCasesForeign - data.data.regional[state].discharged - data.data.regional[state].deaths;\r\n     console.log(\"calculate\",calculateActive);\r\n     const modifiedData = {\r\n        confirmed: calculateActive,\r\n        recovered: data.data.regional[state].discharged,\r\n        deaths: data.data.regional[state].deaths\r\n    }\r\n     return modifiedData;\r\n } catch (error) {\r\n     return error;\r\n }\r\n}","import React from 'react';\r\nimport {Card, Grid, CardContent, Typography} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\nimport CountUp from 'react-countup';\r\n\r\nconst card =(props) =>{\r\n    if(props.data.confirmed){ \r\n    return(\r\n        <div className={styles.container}>    \r\n        <Grid container spacing={3} justify=\"center\">\r\n         <Grid item xs={12} md={3} component={Card} className={cx(styles.infected)}>\r\n            <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                <CountUp start={0} end={props.data.confirmed.value} duration={2} />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{new Date(props.data.lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Number of active cases</Typography>\r\n            </CardContent>\r\n         </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                <CountUp start={0} end={props.data.recovered.value} duration={2} />\r\n            </Typography>\r\n            <Typography>{new Date(props.data.lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Number of recovered cases</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                <CountUp start={0} end={props.data.deaths.value} duration={2} />\r\n            </Typography>\r\n            <Typography>{new Date(props.data.lastUpdate).toDateString()}</Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Number of deaths cases</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n\r\n    </Grid>\r\n    </div>\r\n    );\r\n    }\r\n    else{\r\n     return(\r\n         <h3>loading..</h3>\r\n     )\r\n    }\r\n}\r\nexport default card;","import React, {useState, useEffect} from 'react';\r\nimport {fetchChartData} from '../Api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n \r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n  \r\n    useEffect(() => {\r\n      const fetchMyAPI = async () => {\r\n        const initialDailyData = await fetchChartData();\r\n  \r\n        setDailyData(initialDailyData);\r\n      };\r\n  \r\n      fetchMyAPI();\r\n    }, []);\r\n  \r\n    const barChart = (\r\n      confirmed ? (\r\n        <Bar\r\n          data={{\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n            datasets: [\r\n              {\r\n                label: 'People',\r\n                backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                data: [confirmed.value, recovered.value, deaths.value],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            legend: { display: false },\r\n            title: { display: true, text: `Current state in ${country}` },\r\n          }}\r\n        />\r\n      ) : null\r\n    );\r\n  \r\n    const lineChart = (\r\n      dailyData[0] ? (\r\n        <Line\r\n          data={{\r\n            labels: dailyData.map(({ date }) => date),\r\n            datasets: [{\r\n              data: dailyData.map((data) => data.confirmed),\r\n              label: 'Infected',\r\n              borderColor: '#3333ff',\r\n              fill: true,\r\n            }, {\r\n              data: dailyData.map((data) => data.deaths),\r\n              label: 'Deaths',\r\n              borderColor: 'red',\r\n              backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n              fill: true,\r\n            },\r\n            ],\r\n          }}\r\n        />\r\n      ) : null\r\n    );\r\n  \r\n    if(country.length>2){\r\n    return (\r\n      <div className={styles.container}>\r\n        {barChart}\r\n      </div>\r\n    );\r\n    }\r\n    else{\r\n      return (\r\n        <div className={styles.container}>\r\n          {lineChart}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {FormControl, NativeSelect} from '@material-ui/core';\r\nimport {fetchCountries}  from '../Api';\r\nimport './Country.module.css';\r\n\r\nconst Country = ({handleCountryChange,handleStateChange}) => {\r\nconst [country, setcountry] = useState([]);\r\nuseEffect (() => {\r\n    const fetchData = async() =>{\r\n         const country = await fetchCountries();\r\n         setcountry (country);\r\n    }\r\n\r\n    fetchData();\r\n},[]);\r\n\r\n    return(\r\n      <div>\r\n      Select India for states data <br></br><br></br>\r\n      <FormControl className=\"formControl\">\r\n        \r\n        <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value)}>\r\n            <option value=\"\">Global</option>\r\n            {country.map((country, i)=>\r\n                <option key={i} value={country}>{country}</option>\r\n            )}\r\n        </NativeSelect>\r\n      </FormControl >\r\n        </div>\r\n);\r\n}\r\nexport default Country;","import React, {useState, useEffect} from 'react';\r\nimport {FormControl, NativeSelect} from '@material-ui/core';\r\nimport {fetchIndianStates} from '../Api';\r\nimport './Country.module.css';\r\n\r\nconst FetchStates  = ({ handleStateChange }) => {\r\n    \r\n    const [states, setstates] = useState([]);\r\n\r\n    useEffect (() =>{\r\n        const fetchData = async() => {\r\n        const data = await fetchIndianStates();\r\n        setstates(data);\r\n        }\r\n        fetchData();\r\n    },[]);\r\n\r\n    return(\r\n        <div>\r\n            <FormControl className=\"formControl\">\r\n                <NativeSelect defaultValue=\"\" onChange={(e)=>handleStateChange(e.target.value)}>\r\n                    <option value=\"All States\">All States</option>\r\n                    {states.map((state,i)=>\r\n                    <option key={i} value={i}>{state}</option>\r\n                    )}\r\n\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default FetchStates;","import React from 'react';\r\nimport {Card, Grid, CardContent, Typography} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\nimport CountUp from 'react-countup';\r\n\r\nconst statecard =(props) =>{\r\n    if(props.data){\r\n    return(\r\n        <div className={styles.container}>    \r\n        <Grid container spacing={3} justify=\"center\">\r\n         <Grid item xs={12} md={3} component={Card} className={cx(styles.infected)}>\r\n            <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                <CountUp start={0} end={props.data.confirmed} duration={2} />\r\n            </Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Number of active cases</Typography>\r\n            </CardContent>\r\n         </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                <CountUp start={0} end={props.data.recovered} duration={2} />\r\n            </Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Number of recovered cases</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                <CountUp start={0} end={props.data.deaths} duration={2} />\r\n            </Typography>\r\n            <Typography variant=\"body2\"component=\"p\">Number of deaths cases</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n\r\n    </Grid>\r\n    </div>\r\n    );\r\n    }\r\n    else{\r\n     return(\r\n         <h3>loading..</h3>\r\n     )\r\n    }\r\n}\r\nexport default statecard;","import React, {useState, useEffect} from 'react';\r\nimport {fetchStatesData} from '../Api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n \r\nconst StateChart = (props) => {\r\n  \r\n    const barChart = (\r\n      props.data ? (\r\n        <Bar\r\n          data={{\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n            datasets: [\r\n              {\r\n                label: 'People',\r\n                backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                data: [props.data.confirmed, props.data.recovered, props.data.deaths],\r\n              },\r\n            ],\r\n          }}\r\n          options={{\r\n            legend: { display: false },\r\n            title: { display: true, text: \"Current condition in the selected state\" },\r\n          }}\r\n        />\r\n      ) : null\r\n    );\r\n  \r\n    return(\r\n        <div>\r\n            {barChart}\r\n        </div>\r\n    )\r\n  };\r\nexport default StateChart;","import React, { Component } from 'react';\nimport './App.css';\nimport {fetchCardData, fetchStatesData} from'./Components/Api';\nimport Card from './Components/Card/Card';\nimport Chart from './Components/Chart/Chart';\nimport Country from './Components/CountryPicker/Country';\nimport States from './Components/CountryPicker/States';\nimport StateCard from './Components/Card/StateCard';\nimport StateChart from './Components/Chart/StateChart';\nimport image from './Components/Images/image.png'; \nimport styles from './'\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      data:{},\n      country:' ',\n      stateName: '',\n      isIndia: false,\n      index: 0,\n    }\n  }\n\n  async componentDidMount(){\n      const data  = await fetchCardData();\n      this.setState({\n        data: data.data,\n      })\n  }\n\n  handleCountryChange = async (country) => {\n    const data = await fetchCardData(country, this.state.index );\n    if(country==\"India\"){\n      this.setState({ data, country: country, isIndia: true });\n    }\n    else{\n    this.setState({ data:data.data, country: country, isIndia: false });\n    }\n  }\n\n  handleStateChange = async (index) => {\n    console.log(\"inside state change app.js\",index);\n    const data = await fetchStatesData(index);\n    this.setState({ data, index: index, isState: true});\n  }\n\n  render(){\n    \n  return (\n    <div>\n    <img src={image}  alt=\"COVID-19\"/>\n    {this.state.isIndia ?\n    <div>  \n      <StateCard data={this.state.data}/> \n      <Country handleCountryChange= {this.handleCountryChange}/>\n       <States handleStateChange ={this.handleStateChange}/>  \n       <StateChart data={this.state.data}/>\n      </div>\n      :\n      <div>\n        \n      <Card data={this.state.data}/> \n      <Country handleCountryChange= {this.handleCountryChange}/>\n      <Chart data={this.state.data} country={this.state.country}/>\n    </div>\n  }\n    </div>\n  );\n  }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"oAt1CEQGyHUa1hddGkDi2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"_16iuMvU9s3-cwA-29mlRbT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"_2BVgKHsMElWMiQ9KPIDySR\",\"card\":\"I8RDX7vDRFXQGS_OXEEk-\",\"infected\":\"_3Xo_FGGYjDhx7Ni4Coix_g\",\"recovered\":\"_3ciSF6lF2h-Yxae-BUzXSj\",\"deaths\":\"_2e5fGQfMrhM1uU9AYGrZJX\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"_1h1fztc5lW5ZHjDNUjht_R\",\"image\":\"_3p-ZMf8p3FhUVAJeJ-0-67\"};"],"sourceRoot":""}